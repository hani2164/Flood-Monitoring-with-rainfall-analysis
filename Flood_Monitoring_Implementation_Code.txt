#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <FirebaseESP32.h>

// Firebase credentials
#define FIREBASE_HOST "https://flood-alertation-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "AIzaSyApYb8uDfLDh4oI1M5eLOZV_dCcG_-CKG0"

// Firebase authentication credentials
#define EMAIL "dhaneshdassmct22cb@psnacet.edu.in"
#define PASS "Dhanesh@2004"

// Wi-Fi credentials
const char* ssid = "_.dhxnexh_x18";      // Replace with your WiFi SSID
const char* password = "Dhanesh@2004";  // Replace with your WiFi password

// Firebase objects
FirebaseData firebaseData;
FirebaseAuth auth;
FirebaseConfig config;

// Sensor pins
#define RAIN_SENSOR_PIN 35  // Analog pin for rain sensor
#define TRIG_PIN 5          // TRIG pin for ultrasonic sensor
#define ECHO_PIN 18         // ECHO pin for ultrasonic sensor

// Constants for rainfall speed calculation
const float MAX_VOLTAGE = 3.3;  // Max voltage (3.3V for ESP32)
const int MAX_ANALOG_VALUE = 4095;  // 12-bit ADC on ESP32 (0 to 4095)
const float MAX_RAINFALL_INTENSITY = 50.0;  // Max rainfall rate in mm/hour

// Threshold values for flood alert
const float FLOOD_RAINFALL_THRESHOLD = 30.0;  // Threshold for rainfall intensity in mm/hour
const float FLOOD_WATER_LEVEL_THRESHOLD = 10.0;  // Threshold for water level in cm

// Create an LCD object. Set the LCD address to 0x27 for a 16x2 LCD
LiquidCrystal_I2C lcd(0x27, 16, 2);

float groundDistance = 0;  // Variable to store the ground distance when no water is present
bool isWaterPresent = false;  // Flag to check if water is detected

void setup() {
  Serial.begin(115200);  // Initialize serial communication
  pinMode(TRIG_PIN, OUTPUT);  // Set TRIG pin as output
  pinMode(ECHO_PIN, INPUT);   // Set ECHO pin as input

  lcd.init();  // Initialize the LCD
  lcd.backlight();  // Turn on the LCD backlight

  // Debug message to indicate setup has begun
  Serial.println("Setup initialized...");

  // Measure the initial ground distance when no water is present
  Serial.println("Measuring initial ground distance...");
  groundDistance = measureDistance();
  Serial.print("Ground Distance (No Water): ");
  Serial.print(groundDistance);
  Serial.println(" cm");

  // Connect to Wi-Fi
  connectToWiFi();

  // Initialize Firebase
  config.host = FIREBASE_HOST;
  config.api_key = FIREBASE_AUTH;
  auth.user.email = EMAIL;
  auth.user.password = PASS;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  if (!Firebase.ready()) {
    Serial.println("Failed to connect to Firebase");
  } else {
    Serial.println("Firebase connected");
  }
}

void loop() {
  // Read the analog value from the rain sensor
  int sensorValue = analogRead(RAIN_SENSOR_PIN);
  int invertedValue = MAX_ANALOG_VALUE - sensorValue;
  float voltage = invertedValue * (MAX_VOLTAGE / MAX_ANALOG_VALUE);
  float rainfallIntensity = mapRainfallIntensity(invertedValue);

  // Measure the current distance to the ground or water surface
  float currentDistance = measureDistance();
  float waterLevel = 0;

  // Determine if water is present
  if (currentDistance < groundDistance - 1) {
    waterLevel = groundDistance - currentDistance;
    isWaterPresent = true;
  } else {
    waterLevel = 0;
    isWaterPresent = false;
  }

  // Check flood condition
  bool isFlood = (rainfallIntensity >= FLOOD_RAINFALL_THRESHOLD || waterLevel >= FLOOD_WATER_LEVEL_THRESHOLD);
  String alertCondition = isFlood ? "Flood Alert" : "Normal";

  // Display values on the LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Rain: ");
  lcd.print(rainfallIntensity);
  lcd.print(" mm/h");

  lcd.setCursor(0, 1);
  lcd.print("Water: ");
  lcd.print(waterLevel);
  lcd.print(" cm");

  // Print alert condition on Serial Monitor
  Serial.print("Alert Condition: ");
  Serial.println(alertCondition);

  // Upload data to Firebase
  uploadToFirebase(rainfallIntensity, waterLevel, isFlood);

  delay(1000);  // Delay for readability
}

// Function to measure distance using the ultrasonic sensor
float measureDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);
  float distance = (duration * 0.034) / 2;
  return distance;
}

// Function to map inverted analog value to rainfall intensity
float mapRainfallIntensity(int invertedValue) {
  float intensity = (invertedValue / (float)MAX_ANALOG_VALUE) * MAX_RAINFALL_INTENSITY;
  if (intensity < 1) intensity = 0;  // Ignore values below threshold
  return intensity;
}

// Function to upload data to Firebase
void uploadToFirebase(float rainfallIntensity, float waterLevel, bool isFlood) {
  if (Firebase.ready()) {
    // Update rainfall intensity
    if (Firebase.setFloat(firebaseData, "/sensor_data/rainfall_intensity", rainfallIntensity)) {
      Serial.println("Rainfall intensity data sent to Firebase");
    } else {
      Serial.print("Failed to send rainfall intensity data: ");
      Serial.println(firebaseData.errorReason());
    }

    // Update water level
    if (Firebase.setFloat(firebaseData, "/sensor_data/water_level", waterLevel)) {
      Serial.println("Water level data sent to Firebase");
    } else {
      Serial.print("Failed to send water level data: ");
      Serial.println(firebaseData.errorReason());
    }

    // Update alert condition
    String alertCondition = isFlood ? "Flood Alert" : "Normal";
    if (Firebase.setString(firebaseData, "/sensor_data/alert_condition", alertCondition)) {
      Serial.println("Alert condition status sent to Firebase");
    } else {
      Serial.print("Failed to send alert condition status: ");
      Serial.println(firebaseData.errorReason());
    }
  }
}

// Function to connect to Wi-Fi
void connectToWiFi() {
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");``
  }
  Serial.println();
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}
